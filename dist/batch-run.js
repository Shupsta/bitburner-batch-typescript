export async function main(ns) {
    ns.disableLog("ALL");
    ns.print("\nTemp");
    const target = ns.args[0];
    if (target == undefined) {
        ns.print("Np target server was specified, ending script");
        return;
    }
    ns.scp("batch-hack.js", target, "home");
    ns.scp("batch-grow.js", target, "home");
    ns.scp("batch-weaken.js", target, "home");
    const hackTime = ns.getHackTime(target);
    const growTime = ns.getGrowTime(target);
    const weakenTime = ns.getWeakenTime(target);
    let bufferTime = ns.args[1];
    if (bufferTime == undefined)
        bufferTime = 300;
    const res = GetInfo(hackTime, growTime, weakenTime, bufferTime);
    const depth = res.depth;
    const period = res.period;
    const hackThreads = ns.args[2] != undefined ? ns.args[2] : 11;
    const hackWeakenThreads = ns.args[3] != undefined ? ns.args[3] : 1;
    const growThreads = ns.args[4] != undefined ? ns.args[4] : 48;
    const growWeakenThreads = ns.args[5] != undefined ? ns.args[5] : 5;
    const hack_delay = depth * period - 4 * bufferTime - hackTime;
    const weake_delay_1 = depth * period - 3 * bufferTime - weakenTime;
    const grow_delay = depth * period - 2 * bufferTime - growTime;
    const weake_delay_2 = depth * period - 1 * bufferTime - weakenTime;
    //debugger;
    for (let i = 1; i < 5; i++) {
        ExecThreads(ns, "batch-weaken.js", hackWeakenThreads, [target, weake_delay_1 * i + ((5 * bufferTime) * i)]);
        ExecThreads(ns, "batch-weaken.js", growWeakenThreads, [target, weake_delay_2 * i + ((5 * bufferTime) * i)]);
        ExecThreads(ns, "batch-grow.js", growThreads, [target, grow_delay * i + ((5 * bufferTime) * i)]);
        ExecThreads(ns, "batch-hack.js", hackThreads, [target, hack_delay * i + ((5 * bufferTime) * i)]);
        //ns.exec("batch-weaken.js", target, hackWeakenThreads, target, weake_delay_1 * i);
        //ns.exec("batch-weaken.js", target, growWeakenThreads, target, weake_delay_2 * i);
        //ns.exec("batch-grow.js", target, growThreads, target,grow_delay * i);
        //ns.exec("batch-hack.js", target, hackThreads, target, hack_delay * i);
        //another test
    }
    ns.tprintf("\nDepth | %d", depth);
    ns.tprintf("\nPeriod | %d", period);
    ns.tprintf("\nHack Threads | %d", hackThreads);
    ns.tprintf("\nWeaken H Threads | %d", hackWeakenThreads);
    ns.tprintf("\nGrow Threads | %d", growThreads);
    ns.tprintf("\nWeaken G Threads | %d", growWeakenThreads);
    ns.tprintf("\nHack Time | %d", hackTime);
    ns.tprintf("\nWeaken H Time | %d", weakenTime);
    ns.tprintf("\nGrow Time | %d", growTime);
    ns.tprintf("\nWeaken G Time | %d", weakenTime);
    ns.tprintf("\nHack Delay | %d", hack_delay);
    ns.tprintf("\nWeaken H Delay | %d", weake_delay_1);
    ns.tprintf("\nGrow Delay | %d", grow_delay);
    ns.tprintf("\nWeaken G Delay | %d", weake_delay_2);
    function GetInfo(hackTime, growTime, weakenTime, bufferTime) {
        let period, depth;
        const kW_max = Math.floor(1 + (weakenTime - 4 * bufferTime) / (8 * bufferTime));
        schedule: for (let kW = kW_max; kW >= 1; --kW) {
            const t_min_W = (weakenTime + 4 * bufferTime) / kW;
            const t_max_W = (weakenTime - 4 * bufferTime) / (kW - 1);
            const kG_min = Math.ceil(Math.max((kW - 1) * 0.8, 1));
            const kG_max = Math.floor(1 + kW * 0.8);
            for (let kG = kG_max; kG >= kG_min; --kG) {
                const t_min_G = (growTime + 3 * bufferTime) / kG;
                const t_max_G = (growTime - 3 * bufferTime) / (kG - 1);
                const kH_min = Math.ceil(Math.max((kW - 1) * 0.25, (kG - 1) * 0.3125, 1));
                const kH_max = Math.floor(Math.min(1 + kW * 0.25, 1 + kG * 0.3125));
                for (let kH = kH_max; kH >= kH_min; --kH) {
                    const t_min_H = (hackTime + 5 * bufferTime) / kH;
                    const t_max_H = (hackTime - 1 * bufferTime) / (kH - 1);
                    const t_min = Math.max(t_min_H, t_min_G, t_min_W);
                    const t_max = Math.min(t_max_H, t_max_G, t_max_W);
                    if (t_min <= t_max) {
                        period = t_min;
                        depth = kW;
                        break schedule;
                    }
                }
            }
        }
        return { period: period, depth: depth };
    }
}
export function ExecThreads(ns, script, neededThreads, myArgs) {
    ns.disableLog("getServerMaxRam");
    ns.disableLog("getServerUsedRam");
    ns.disableLog("getScriptRam");
    ns.disableLog("scp");
    ns.disableLog("exec");
    const servers = SortByMostAvailableRam(ns, GetAllServers(ns));
    const pids = Array();
    let firedThreads = 0;
    for (const server of servers) {
        const availRam = ns.getServerMaxRam(server) - ns.getServerUsedRam(server);
        let availThreads = Math.floor(availRam / ns.getScriptRam(script));
        if (availThreads <= 0)
            continue;
        if (availThreads > (neededThreads - firedThreads))
            availThreads = neededThreads - firedThreads;
        ns.scp(script, server, "home");
        const pid = ns.exec(script, server, availThreads, ...myArgs);
        if (pid == 0)
            continue;
        else
            pids.push(pid);
        firedThreads += availThreads;
        if (firedThreads >= neededThreads)
            break;
    }
    return { threads: firedThreads, pids: pids };
}
function SortByMostAvailableRam(ns, servers) {
    ns.disableLog("getServerMaxRam");
    ns.disableLog("getServerUsedRam");
    return servers.sort(SortByAvailable);
    function SortByAvailable(a, b) {
        if (a == "home")
            return 1;
        if (b == "home")
            return -1;
        const maxA = ns.getServerMaxRam(a);
        const maxB = ns.getServerMaxRam(b);
        const availA = maxA - ns.getServerUsedRam(a);
        const availB = maxB - ns.getServerUsedRam(b);
        if (availA > availB)
            -1;
        else if (availA < availB)
            1;
        else {
            if (maxA > maxB)
                return -1;
            else if (maxA < maxB)
                1;
            else
                return 0;
        }
        return 0;
    }
}
export function GetAllServers(ns) {
    ns.disableLog("scan");
    const servers = ['home'];
    for (const server of servers) {
        const found = ns.scan(server);
        if (server != 'home')
            found.splice(0, 1);
        servers.push(...found);
    }
    return servers;
}
export async function WaitPIDS(ns, pids) {
    ns.disableLog("isRunning");
    ns.disableLog("sleep");
    if (pids == undefined || pids.length == 0)
        return;
    for (const pid of pids) {
        if (ns.isRunning(pid))
            ns.printf("\nWaiting for %s", pid);
        while (ns.isRunning(pid)) {
            await ns.sleep(3000);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmF0Y2gtcnVuLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2JhdGNoLXJ1bi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQzdCLEVBQUUsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUM7SUFFckIsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUVuQixNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQ3BDLElBQUksTUFBTSxJQUFJLFNBQVMsRUFBRTtRQUNyQixFQUFFLENBQUMsS0FBSyxDQUFDLCtDQUErQyxDQUFDLENBQUM7UUFDMUQsT0FBTztLQUNWO0lBRUQsRUFBRSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3hDLEVBQUUsQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN4QyxFQUFFLENBQUMsR0FBRyxDQUFDLGlCQUFpQixFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztJQUUxQyxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hDLE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDeEMsTUFBTSxVQUFVLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM1QyxJQUFJLFVBQVUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQ3RDLElBQUksVUFBVSxJQUFJLFNBQVM7UUFBRSxVQUFVLEdBQUcsR0FBRyxDQUFDO0lBQzlDLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxVQUFV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